// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2024 00:37:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] a;
wire [31:0] ADDRTargetE;
wire [1:0] ALUSrcBE;
wire [31:0] b;
wire FlushD;
wire FlushE;
wire [1:0] ForwardAE;
wire [1:0] ForwardBE;
wire [31:0] FPUResultE;
wire FRegWriteW;
wire [31:0] InstrD;
wire [31:0] InstrF;
wire [1:0] JmpE;
wire [31:0] PC;
wire PCJmpE;
wire [4:0] RdM;
wire [4:0] RdW;
wire [31:0] ReadDataM;
wire RegWriteW;
wire [31:0] ResultE;
wire StallD;
wire StallF;
wire zero;

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.ADDRTargetE(ADDRTargetE),
	.ALUSrcBE(ALUSrcBE),
	.b(b),
	.clk(clk),
	.FlushD(FlushD),
	.FlushE(FlushE),
	.ForwardAE(ForwardAE),
	.ForwardBE(ForwardBE),
	.FPUResultE(FPUResultE),
	.FRegWriteW(FRegWriteW),
	.InstrD(InstrD),
	.InstrF(InstrF),
	.JmpE(JmpE),
	.PC(PC),
	.PCJmpE(PCJmpE),
	.RdM(RdM),
	.RdW(RdW),
	.ReadDataM(ReadDataM),
	.RegWriteW(RegWriteW),
	.reset(reset),
	.ResultE(ResultE),
	.StallD(StallD),
	.StallF(StallF),
	.zero(zero)
);
initial 
begin 
#200000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
	reset = #30000 1'b1;
end 
endmodule

